name: Flutter CI

on:
  # Runs this action when you push on master
  push:
    branches: ["master"]
  # Runs this when a PR against master is created
  pull_request:
    branches: ["master"]

jobs:
  build_android:
    # The machine, we can also use windows-latest or ubuntu-latest
    # We are choosing macos-latest because we will be also building for iOS
    runs-on: ubuntu-latest

    steps:
      # Clones the project on the machine
      - uses: actions/checkout@v4

      # Sets up java 11
      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "11"

      # Installs flutter and related dependency on this machine
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          # flutter-version: '3.16.8'
          # ^ If you want to use a specific version of flutter

      # Fetches proj dependencies from pub
      - name: Install dependencies
        run:
          flutter pub get
          # ^ If you want to use a specific version of flutter

          # Verifies if the dart code is formatted well
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        # --set-exit-if-changed stops execution if the any code is not well formatted
        # --output=none prints files which needs to be formatted

      # Checks for Symantic errors. Can be configured using analysis_options.yaml
      - name: Analyze project source
        run: flutter analyze
        # optionally use --fatal-warnings to stop execution if any warnings are found

      # Runs unit test
      - name: Run tests
        run: flutter test

        # Create android apk
      - name: Build apk
        run: flutter build apk

        # Upload apk to Firebase distribution
      - name: Upload apk to Firebase distribution
        uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
        with:
          appId: 1:303097136559:android:29ab855b0d40d55668db5a
          serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
          groups: all_testers
          file: build/app/outputs/flutter-apk/app-release.apk

  build_ios:
    runs-on: macos-latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v4

        # Installs flutter and related dependency on this machine
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel:
            "stable"
            # flutter-version: '3.16.8'
            # ^ If you want to use a specific version of flutter

      # Fetch project dependencies
      - name: Install dependencies
        run: flutter pub get

      # Install CocoaPods
      - name: Install CocoaPods
        run: pod install --project-directory=ios

      # Verify Dart code formatting
      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .

      # Analyze the project for semantic errors
      - name: Analyze project source
        run: flutter analyze

      # Build the iOS app without code signing
      # - name: Build iOS app
      #   run: flutter build ios --no-codesign
      - name: Build iOS app
        run: |
          flutter build ipa --no-codesign

      # # Install Firebase CLI
      # - name: Install Firebase CLI
      #   run: |
      #     curl -sL https://firebase.tools | bash

      # - name: Set up GOOGLE_APPLICATION_CREDENTIALS
      #   run: echo "${{ secrets.CREDENTIAL_FILE_CONTENT }}" > $HOME/service-account.json

      # - name: Upload to Firebase App Distribution
      #   env:
      #     GOOGLE_APPLICATION_CREDENTIALS: $HOME/service-account.json
      #   run: |
      #     firebase appdistribution:distribute \
      #     build/ios/ipa/Runner.ipa \
      #     --app 1:303097136559:ios:bf607eaa771de30168db5a \
      #     --groups "all_testers"

      # # Upload the IPA to Firebase App Distribution
      # - name: Upload to Firebase App Distribution
      #   env:
      #     GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #   run: |
      #     echo ${{ secrets.CREDENTIAL_FILE_CONTENT }} > credentials.json
      #     export CREDENTIALS_FILE_CONTENT=$PWD/credentials.json
      #     firebase appdistribution:distribute \
      #     build/ios/ipa/Runner.ipa \
      #     --app 1:303097136559:ios:bf607eaa771de30168db5a \
      #     --groups "all_testers"

      #   # Upload the IPA to Firebase App Distribution
      # - name: Upload to Firebase App Distribution
      #   env:
      #     FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
      #   run: |
      #     firebase appdistribution:distribute \
      #     build/ios/ipa/Runner.ipa \
      #     --app 1:303097136559:ios:bf607eaa771de30168db5a \
      #     --groups "all_testers" \
      #     --token "${{ secrets.FIREBASE_TOKEN }}"

      # # Upload the IPA to Firebase App Distribution
      # - name: Upload to Firebase Distribution
      #   uses: wzieba/Firebase-Distribution-Github-Action@v1.7.0
      #   with:
      #     appId: 1:303097136559:android:29ab855b0d40d55668db5a
      #     serviceCredentialsFileContent: ${{ secrets.CREDENTIAL_FILE_CONTENT }}
      #     groups: all_testers
      #     file: build/ios/ipa/Runner.ipa
      #     token: ${{ secrets.FIREBASE_SECRET_KEY }}
